#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/3.0/doc/configuration.txt
#   https://docs.haproxy.org/3.0/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
global 
  daemon
  log stdout format raw local0
#---------------------------------------------------------------------
defaults
  mode tcp
  timeout client 1200s
  timeout connect 605s
  timeout server 1000s
  timeout http-request 1000s
  log global
  option tcplog

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
  bind 0.0.0.0:80

  # Rate limit based on parameter '?ip=....' in URL
  stick-table type string size 100k  expire 30s  store http_req_rate(20s)   # Window of 10 seconds
  # acl has_param url_param(ip) -m found # Only needed if param is a MUST
  acl exceeds_limit url_param(ip),table_http_req_rate() gt 10   # Limit of 10
  http-request track-sc0 url_param(ip) unless exceeds_limit
  http-request deny deny_status 429 if exceeds_limit # or has_param # if param is a MUST

#   # Rate Limit base on ip address of client
#   stick-table  type ipv6  size 100k  expire 30s  store http_req_rate(10s)
#   http-request track-sc0 src
#   http-request deny deny_status 429 if { sc_http_req_rate(0) gt 20 }
  default_backend app

  listen stats
    bind :9000
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth Username:Password

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
  balance roundrobin
  server  app1 node-1:80 check
  server  app2 node-2:80 check




